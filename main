map = window.create(term.native(),1,1,27,19)

turtleName = "Turtle"
mapFile = "gladiusMap"
tMap = {}
if fs.exists(turtleName) then
  local file = fs.open(turtleName,"r")
  local save = textutils.unserialize(file.readAll)
  curX, curY = save.x, save.y
  curLayer = save.layer
  file.close()
else
  curX, curY = 0,0
  curLayer = 0
end

function newBlock(X,Y,Color,Layer)
  local template = {
  	x = X,
  	y = Y,
  	color = Color,
  	layer = Layer}
  table.insert(tMap,template)
end

function redraw()
  map.setBackgroundColor(colors.black)
  map.clear()
  term.redirect(map)
  for i,v in pairs(tMap) do
  	if v.x - curX > -14 and v.x - curX < 28 and v.y - curY > -10 and v.y - curY < 20 then
  	  paintutils.drawPixel(v.x - curX, v.y - curY, v.color)
  	end
  end
  term.setCursorPos(14,10)
  term.setBackgroundColor(colors.yellow)
  term.setTextColor(colors.black)
  term.write("@")
  term.redirect(term.native())
end

function turtleError()
  map.setBackgroundColor(colors.blue)
  map.clear()
  local text = "Turtle not linked"
  local w,h = map.getSize()
  map.setCursorPos(math.floor(w / 2 - text:len() / 2 + .5), math.floor(h / 2 + .5))
  map.setTextColor(colors.white)
  map.write(text)
end
 
turtleError()

for i=1, 27 do
  newBlock(i,math.random(1,19), colors.red, curLayer)
end
redraw()
repeat
  local event, key = os.pullEvent("key")
  if key == keys.up then
  	curY = curY - 1
  elseif key == keys.down then
  	curY = curY + 1
  elseif key == keys.right then
  	curX = curX + 1
  elseif key == keys.left then
  	curX = curX - 1
  elseif key == keys.w then
  	curLayer = curLayer + 1
  elseif key == keys.s then
  	curLayer = curLayer - 1
  end
  redraw()
until key == keys.one 
